"use client";
import { useState, useEffect } from "react";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { storage } from "@/firebase";
import { createProduct } from "../Functions/ProductUtils";
import Image from "next/image"; // Import Image from next/image
import { fetchCategories } from "../Functions/CategoryUtils";

export default function UploadProducts({ user }) {
  const [product, setProduct] = useState({
    title: "",
    size: "",
    tags: "",
    category: "", // Add category to product state
    description: "",
    gender: "",
    color: "",
    price: 0,
    brand: "",
    imageUrls: [], // Change from imageUrl to imageUrls array
  });
  const [images, setImages] = useState([]); // State to hold multiple images
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState([]); // Store categories fetched from Firestore

  useEffect(() => {
    const fetchCategoriesData = async () => {
      const categoriesList = await fetchCategories();
      setCategories(categoriesList);
    };

    fetchCategoriesData();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProduct((prevProduct) => ({
      ...prevProduct,
      [name]:
        name === "price" || name === "wholesalePrice" ? Number(value) : value,
    }));
  };

  const handleImageChange = (e) => {
    if (e.target.files.length > 0) {
      const newImages = Array.from(e.target.files); // Get new images
      setImages((prevImages) => [...prevImages, ...newImages]); // Concatenate new images with existing images
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const uploadedImageUrls = [];

      // Upload each selected image to Firebase Storage and collect URLs
      if (images.length > 0) {
        for (let image of images) {
          const imageRef = ref(storage, `products/${image.name}`);
          await uploadBytes(imageRef, image);
          const imageUrl = await getDownloadURL(imageRef);
          uploadedImageUrls.push(imageUrl); // Add image URL to array
        }
      }

      const productData = {
        ...product,
        imageUrls: uploadedImageUrls, // Save array of image URLs
        sellerEmail: user.email,
      };

      // Save product using the unique ID generated by uuidv4
      await createProduct(productData, user.uniqueId);
      // Clear form fields and show success message
      setProduct({
        title: "",
        size: "",
        tags: "",
        category: "", // Add category to product state
        description: "",
        gender: "",
        color: "",
        price: 0,
        brand: "",
        imageUrls: [], // Change from imageUrl to imageUrls array
      })

      alert("Product added successfully");
    } catch (error) {
      console.error("Error adding product: ", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl mb-4">Upload Products</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-gray-700">Name</label>
            <input
              type="text"
              name="title"
              value={product.title}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Size</label>
            <input
              type="text"
              name="size"
              value={product.size}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Tags</label>
            <input
              type="text"
              name="tags"
              value={product.tags}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Category</label>
            <select
              name="category"
              value={product.category}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            >
              <option value="">Select Category</option>
              {categories.map((category) => (
                <option key={category.id} value={category.title}>
                  {category.title}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-gray-700">Description</label>
            <textarea
              name="description"
              value={product.description}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Gender</label>
            <select
              name="gender"
              value={product.gender}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            >
              <option value="">Select Gender</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
              <option value="Unisex">Unisex</option>
            </select>
          </div>
          <div>
            <label className="block text-gray-700">Color</label>
            <input
              type="text"
              name="color"
              value={product.color}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Price</label>
            <input
              type="number"
              name="price"
              value={product.price}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Brand</label>
            <input
              type="text"
              name="brand"
              value={product.brand}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>

          <div>
            <label className="block text-gray-700">Images</label>
            <input
              type="file"
              multiple
              onChange={handleImageChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            />
          </div>
        </div>
        {/* Display image previews */}
        <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
          {images.length > 0 &&
            images.map((image, index) => (
              <div key={index} className="relative w-40">
                <Image
                  src={URL.createObjectURL(image)}
                  layout="contained" // Adjust layout to responsive for better styling
                  width={100}
                  height={100}
                  alt={`Preview ${index + 1}`}
                  className="object-cover w-full h-full rounded border border-gray-300"
                />
              </div>
            ))}
        </div>
        <button
          type="submit"
          className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition duration-300"
          disabled={loading}
        >
          {loading ? (
            <svg
              className="animate-spin h-5 w-5 mr-3 inline-block"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
          ) : (
            "Add Product"
          )}
        </button>
      </form>
    </div>
  );
}
